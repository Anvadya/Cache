$date
	Wed Nov  9 23:20:24 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module maintb $end
$var wire 8 ! outputdata_tb [7:0] $end
$var reg 1 " clk $end
$var reg 1 # isWrite_tb $end
$var reg 32 $ memoryAddress_tb [31:0] $end
$var reg 8 % writeValue_tb [7:0] $end
$var integer 32 & hitno [31:0] $end
$var integer 32 ' totalno [31:0] $end
$scope module c1 $end
$var wire 1 " clk $end
$var wire 1 # isWrite $end
$var wire 32 ( memoryAddress [31:0] $end
$var wire 8 ) outputdata [7:0] $end
$var wire 8 * outputmem [7:0] $end
$var wire 8 + writeValue [7:0] $end
$var reg 32 , Address [31:0] $end
$var reg 8 - Data [7:0] $end
$var reg 1 . ismemWrite $end
$var reg 8 / tempout [7:0] $end
$var integer 32 0 Associativity [31:0] $end
$var integer 32 1 Blocks [31:0] $end
$var integer 32 2 c [31:0] $end
$var integer 32 3 column [31:0] $end
$var reg 1 4 hitbit $end
$var integer 32 5 index [31:0] $end
$var integer 32 6 offset [31:0] $end
$var integer 32 7 r [31:0] $end
$var integer 32 8 tag [31:0] $end
$scope module m1 $end
$var wire 32 9 Address [31:0] $end
$var wire 8 : Data [7:0] $end
$var wire 1 . ismemWrite $end
$var wire 8 ; outputmem [7:0] $end
$var wire 1 < outputdata $end
$var reg 8 = Address_last8bits [7:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 > i [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 ? j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop10 $end
$var integer 32 @ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop11 $end
$var integer 32 A i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 B i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 C i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop4 $end
$var integer 32 D i [31:0] $end
$scope begin $ivl_for_loop5 $end
$var integer 32 E j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 F i [31:0] $end
$scope begin $ivl_for_loop7 $end
$var integer 32 G j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 H i [31:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 I j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
b100 ?
b1000 >
b0 =
0<
bz ;
b0 :
b0 9
bx 8
b1000 7
bx 6
bx 5
04
bx 3
b100 2
b100000 1
b100 0
bx /
0.
b0 -
b0 ,
b1001 +
bz *
bx )
b10000000000001111110000110 (
b0 '
b0 &
b1001 %
b10000000000001111110000110 $
1#
0"
bx !
$end
#10
1<
b10000111 =
b1 '
b1000 A
b1000 I
b1000 H
b10000000000001111110000111 ,
b10000000000001111110000111 9
b100 B
b0 3
b10000000000001111110 8
b0 5
b110 6
1"
#20
0"
#30
b10 '
b1000 A
b1000 I
b1000 H
b10000000000001111110000111 ,
b10000000000001111110000111 9
b100 B
1"
#40
0"
